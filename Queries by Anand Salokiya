--Task 1. Database Design--

Create Database HMBank

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,  
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    DOB DATE,
    email VARCHAR(100),
    phone_number VARCHAR(15),
    address VARCHAR(255)
);

CREATE TABLE Accounts (
    account_id INT PRIMARY KEY IDENTITY(1,1),  
    customer_id INT, 
    account_type VARCHAR(20) NOT NULL, 
    balance DECIMAL(18, 2) DEFAULT 0.00, 
    CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Transactions(
	transaction_id INT PRIMARY KEY IDENTITY(1,1),
	account_id INT,
	transaction_type VARCHAR(50),
	amount DECIMAL(10,2),
	transaction_date DATE,
	FOREIGN KEY (account_id) REFERENCES Accounts(account_id));

------------------------------------------------------------------------------------------------------------------------------------------

--Task 2. Select, Where, Between, AND, LIKE--

Insert into Customers(customer_id,first_name,last_name,DOB,email,phone_number,address)values
(11,'Anand','Salokiya','2003-06-06','salokiyanand@gmail.com','7509301102','Vijay Nagar Indore'),
(22,'Amit', 'Sharma', '1985-07-10', 'amit.sharma@example.com', '9876543210', '123 MG Road, Indore, Madhya Pradesh'),
(33,'Pooja', 'Verma', '1990-08-22', 'pooja.verma@example.com', '8765432109', '456 Kharadi, Pune, Maharashtra'),
(44,'Rajesh', 'Gupta', '1975-04-15', 'rajesh.gupta@example.com', '7654321098', '789 Sector 18, Noida, Uttar Pradesh'),
(55,'Sunita', 'Patel', '1995-11-30', 'sunita.patel@example.com', '6543210987', '101 Vashi, Navi Mumbai, Maharashtra'),
(66,'Vikram', 'Kumar', '1988-01-25', 'vikram.kumar@example.com', '5432109876', '202 Sector 10, Dwarka, Delhi'),
(77,'Anjali', 'Rao', '1992-09-13', 'anjali.rao@example.com', '4321098765', '303 IT Park, Hyderabad, Telangana'),
(88,'Ravi', 'Joshi', '1980-03-03', 'ravi.joshi@example.com', '3210987654', '404 Lal Kothi, Jaipur, Rajasthan'),
(99,'Sneha', 'Desai', '1998-06-18', 'sneha.desai@example.com', '2109876543', '505 Andheri West, Mumbai, Maharashtra'),
(111,'Arjun', 'Singh', '1983-12-09', 'arjun.singh@example.com', '1098765432', '606 Kormangala, Bangalore, Karnataka'),
(222,'Meena', 'Thakur', '2000-02-20', 'meena.thakur@example.com', '9988776655', '707 Gandhi Nagar, Bhopal, Madhya Pradesh');

select * from Customers;


INSERT INTO Accounts (customer_id, account_type, balance) VALUES
(11, 'Savings', 2000.00),
(22, 'Current', 5000.00),
(33, 'Savings', 1500.00),
(44, 'Fixed', 30000.00),
(55, 'Current', 1000.50),
(66, 'Savings', 2500.75),
(77, 'Current', 3500.00),
(88, 'Fixed', 15000.00),
(99, 'Savings', 4000.00),
(111, 'Current', 6000.00),
(222, 'Savings', 3000.00);

select * from Accounts;

INSERT INTO Transactions (account_id, transaction_type, amount, transaction_date) VALUES
(1, 'Deposit', 1000.00, '2024-01-01'),
(1, 'Withdrawal', 500.00, '2024-01-05'),
(2, 'Deposit', 2500.00, '2024-01-10'),
(2, 'Withdrawal', 300.00, '2024-01-15'),
(3, 'Deposit', 1500.00, '2024-01-20'),
(4, 'Deposit', 5000.00, '2024-01-25'),
(5, 'Withdrawal', 1000.00, '2024-01-30'),
(6, 'Deposit', 2000.00, '2024-02-01'),
(7, 'Withdrawal', 750.00, '2024-02-05'),
(8, 'Deposit', 1200.00, '2024-02-10'),
(9, 'Withdrawal', 500.00, '2024-02-15'),
(10, 'Deposit', 3000.00, '2024-02-20');

--1. query to retrieve the name, account type and email of all customers--

SELECT 
    c.first_name, 
    c.last_name, 
    a.account_type, 
    c.email
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id;

--2. query to list all transaction corresponding customer.--
SELECT 
    c.first_name, 
    c.last_name, 
    c.email, 
    a.account_type, 
    t.transaction_type, 
    t.amount, 
    t.transaction_date
FROM 
    Transactions t
JOIN 
    Accounts a ON t.account_id = a.account_id
JOIN 
    Customers c ON a.customer_id = c.customer_id;

--3. query to increase the balance of a specific account by a certain amount.--

UPDATE Accounts
SET balance = balance + 2000
WHERE account_id = 2;

select * from Accounts

--4.query to Combine first and last names of customers as a full_name--
SELECT 
    CONCAT(first_name, ' ', last_name) AS full_name
FROM 
    Customers;

--5. query to remove accounts with a balance of zero where the account type is savings.--
DELETE FROM Accounts
WHERE balance = 0.00
AND account_type = 'Savings';

--6.query to Find customers living in a specific city--

SELECT 
    first_name, 
    last_name, 
    email, 
    address
FROM 
    Customers
WHERE 
    address LIKE '%Indore%';

--7. query to Get the account balance for a specific account.--

SELECT 
    balance
FROM 
    Accounts
WHERE 
    account_id = 7;


--8.query to List all current accounts with a balance greater than $1,000--
SELECT 
    account_id, 
    customer_id, 
    balance
FROM 
    Accounts
WHERE 
    account_type = 'Current' 
    AND balance > 1000.00;

--9. query to Retrieve all transactions for a specific account.--
SELECT 
    transaction_id, 
    transaction_type, 
    amount, 
    transaction_date
FROM 
    Transactions
WHERE 
    account_id = 9;

--10.query to Calculate the interest accrued on savings accounts based on a given interest rate.--
SELECT 
    account_id, 
    balance, 
    (balance * 5 / 100) AS interest_accrued
FROM 
    Accounts
WHERE 
    account_type = 'Savings';

--11.query to Identify accounts where the balance is less than a specified overdraft limit.--
SELECT 
    account_id, 
    customer_id, 
    balance
FROM 
    Accounts
WHERE 
    balance < 4000.00;

--12. query to Find customers not living in a specific city.--
SELECT 
    first_name, 
    last_name, 
    email, 
    address
FROM 
    Customers
WHERE 
    address NOT LIKE '%Indore%';

---------------------------------------------------------------------------------------------------------------------------------------


--Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins--

--1. query to Find the average account balance for all customers--
SELECT 
    AVG(balance) AS average_balance
FROM 
    Accounts;

--2.query to Retrieve the top 10 highest account balances--
SELECT TOP 10 
    account_id, 
    balance
FROM 
    Accounts
ORDER BY 
    balance DESC;

--3.query to Calculate Total Deposits for All Customers in specific date--
SELECT 
    SUM(amount) AS total_deposits
FROM 
    Transactions
WHERE 
    transaction_type = 'Deposit' 
    AND transaction_date = '2024-01-01';

--4.query to Find the Oldest and Newest Customers.--

-- Oldest Customer
SELECT TOP 1 
    first_name, 
    last_name, 
    dob
FROM 
    Customers
ORDER BY 
    dob ASC;

-- Newest Customer
SELECT TOP 1 
    first_name, 
    last_name, 
    dob
FROM 
    Customers
ORDER BY 
    dob DESC;

--5.query to Retrieve transaction details along with the account type.
SELECT 
    t.transaction_id, 
    t.transaction_type, 
    t.amount, 
    t.transaction_date, 
    a.account_type
FROM 
    Transactions t
JOIN 
    Accounts a ON t.account_id = a.account_id;

--6. query to Get a list of customers along with their account details.
SELECT 
    c.first_name, 
    c.last_name, 
    c.email, 
    c.address, 
    a.account_id, 
    a.account_type, 
    a.balance
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id;

--7.query to Retrieve transaction details along with customer information for a specific account

SELECT 
    t.transaction_id, 
    t.transaction_type, 
    t.amount, 
    t.transaction_date, 
    c.first_name, 
    c.last_name, 
    c.email, 
    c.address
FROM 
    Transactions t
JOIN 
    Accounts a ON t.account_id = a.account_id
JOIN 
    Customers c ON a.customer_id = c.customer_id
WHERE 
    a.account_id = 7;

--8.query to Identify customers who have more than one account.

SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(a.account_id) AS account_count
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name
HAVING 
    COUNT(a.account_id) > 1;

--9.query to Calculate the difference in transaction amounts between deposits and withdrawals.

SELECT 
    SUM(CASE WHEN transaction_type = 'Deposit' THEN amount ELSE 0 END) AS total_deposits,
    SUM(CASE WHEN transaction_type = 'Withdrawal' THEN amount ELSE 0 END) AS total_withdrawals,
    SUM(CASE WHEN transaction_type = 'Deposit' THEN amount ELSE 0 END) - 
    SUM(CASE WHEN transaction_type = 'Withdrawal' THEN amount ELSE 0 END) AS difference
FROM 
    Transactions;

	CREATE TABLE DailyBalances (
    balance_id INT PRIMARY KEY IDENTITY(1,1),
    account_id INT,
    balance DECIMAL(18, 2),
    balance_date DATE,
    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

INSERT INTO DailyBalances (account_id, balance, balance_date) VALUES
(1, 1500.00, '2024-01-01'),
(1, 1600.00, '2024-01-02'),
(2, 5000.00, '2024-01-01'),
(2, 5200.00, '2024-01-02'),
(3, 3000.00, '2024-01-01'),
(3, 3100.00, '2024-01-02'),
(4, 4500.00, '2024-01-01'),
(4, 4600.00, '2024-01-02'),
(5, 2500.00, '2024-01-01'),
(5, 2700.00, '2024-01-02'),
(6, 4000.00, '2024-01-01'),
(6, 4200.00, '2024-01-02'),
(7, 3500.00, '2024-01-01'),
(7, 3700.00, '2024-01-02'),
(8, 6000.00, '2024-01-01'),
(8, 6100.00, '2024-01-02'),
(9, 2000.00, '2024-01-01'),
(9, 2200.00, '2024-01-02'),
(10, 8000.00, '2024-01-01'),
(10, 8100.00, '2024-01-02');


--10.query to Calculate the average daily balance for each account over a specifie period.
SELECT 
    account_id,
    AVG(balance) AS average_daily_balance
FROM 
    DailyBalances
WHERE 
    balance_date BETWEEN '2024-01-01' AND '2024-01-31'
GROUP BY 
    account_id;

--11.total balance for each account type

SELECT 
    account_type, 
    SUM(balance) AS total_balance
FROM 
    Accounts
GROUP BY 
    account_type;

--12.accounts with the highest number of transactions order by descending order

SELECT 
    a.account_id, 
    COUNT(t.transaction_id) AS transaction_count
FROM 
    Accounts a
LEFT JOIN 
    Transactions t ON a.account_id = t.account_id
GROUP BY 
    a.account_id
ORDER BY 
    transaction_count DESC;

--13.customers with high aggregate account balances, along with their account types
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    a.account_type, 
    SUM(a.balance) AS total_balance
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    a.account_type
ORDER BY 
    total_balance DESC;

--14. duplicate transactions based on transaction amount, date, and account.
SELECT 
    transaction_type, 
    amount, 
    transaction_date, 
    account_id, 
    COUNT(*) AS transaction_count
FROM 
    Transactions
GROUP BY 
    transaction_type, 
    amount, 
    transaction_date, 
    account_id
HAVING 
    COUNT(*) > 1
ORDER BY 
    transaction_date, 
    account_id;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--Tasks 4: Subquery and its type

--1.customer(s) with the highest account balance

SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    MAX(a.balance) AS highest_balance
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name
HAVING 
    MAX(a.balance) = (
        SELECT 
            MAX(balance) 
        FROM 
            Accounts
    );

--2.average account balance for customers who have more than one account.

SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    AVG(a.balance) AS average_balance
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name
HAVING 
    COUNT(a.account_id) > 1;

--3. accounts with transactions whose amounts exceed the average transaction amount
SELECT 
    a.account_id, 
    a.account_type, 
    t.transaction_id, 
    t.amount
FROM 
    Accounts a
JOIN 
    Transactions t ON a.account_id = t.account_id
WHERE 
    t.amount > (
        SELECT 
            AVG(amount) 
        FROM 
            Transactions
    );

--4.customers who have no recorded transactions
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    c.email, 
    c.address
FROM 
    Customers c
LEFT JOIN 
    Transactions t ON c.customer_id = t.transaction_id
WHERE 
    t.transaction_id IS NULL;

--5. total balance of accounts with no recorded transactions
SELECT 
    SUM(a.balance) AS total_balance
FROM 
    Accounts a
LEFT JOIN 
    Transactions t ON a.account_id = t.account_id
WHERE 
    t.transaction_id IS NULL;

--6. transactions for accounts with the lowest balance
SELECT 
    t.transaction_id, 
    t.transaction_type, 
    t.amount, 
    t.transaction_date, 
    a.account_id, 
    a.balance
FROM 
    Transactions t
JOIN 
    Accounts a ON t.account_id = a.account_id
WHERE 
    a.balance = (SELECT MIN(balance) FROM Accounts);

--7.customers who have accounts of multiple types.

SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    COUNT(DISTINCT a.account_type) AS account_type_count
FROM 
    Customers c
JOIN 
    Accounts a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, 
    c.first_name, 
    c.last_name
HAVING 
    COUNT(DISTINCT a.account_type) > 1;

--8.the percentage of each account type out of the total number of accounts
SELECT 
    account_type,
    COUNT(*) AS account_count,
    (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Accounts)) AS percentage
FROM 
    Accounts
GROUP BY 
    account_type;

--9.all transactions for a customer with a given customer_id

SELECT 
    t.transaction_id, 
    t.transaction_type, 
    t.amount, 
    t.transaction_date, 
    a.account_id
FROM 
    Transactions t
JOIN 
    Accounts a ON t.account_id = a.account_id
WHERE 
    a.customer_id = 3;

--10.the total balance for each account type, including a subquery within the SELECT clause.

SELECT 
    account_type, 
    SUM(balance) AS total_balance,
    (SELECT SUM(balance) FROM Accounts) AS overall_balance
FROM 
    Accounts
GROUP BY 
    account_type;



----------------------------------------------------------------------------------------------------END------------------------------------------------------------------------------------------------------------------










